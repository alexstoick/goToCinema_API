HOST: http://www.google.com/

--- goToCinema API ---
---
Welcome to the our sample API documentation. All comments can be written in (support [Markdown](http://daringfireball.net/projects/markdown/syntax) syntax)
---

--
Movies
Related to the database & movie storage
--

Shows a list of all movies with their showtimes joined together
GET /movies
< 200
< Content-Type: application/json
[{"id":"etc", "titluRo":"etc" , "titluEn": "etc" , "regizor": "etc", "nota":"etc" , 
    "image":"etc", "actori": "etc" , "cinema" : "etc" , "ora": "123" }]
    

Shows specific info about a movie
GET /movies/{id}
< 200
< Content-Type: application/json
[{"id":"etc", "titluRo":"etc" , "titluEn": "etc" , "regizor": "etc", "nota":"etc" , 
    "image":"etc", "actori": "etc" }]

Shows all the showtimes for {id} movie
GET /movies/{id}/aparitii
< 200
< Content-Type: application/json
[{ "place": "cinema", "hour":"ora" }]

--
Users
The following is a section of resources related to the users & their tokens
--
Authenticates a user to the system, has <b> 3 </b> possible return values. It also generates an <b>AUTH_KEY</b> which is
stored in the database until the user is logged out.
<table>
    <tr>
        <td><b>loggedIn</b></td>
        <td><b>key</b></td>
        <td><b>error</b></td>
    </tr>
    <tr>
        <td>true</td>
        <td>AUTH_KEY</td>
        <td>-</td>
    </tr>
    <tr>
        <td>false</td>
        <td>-</td>
        <td>"email"</td>
    </tr>
    <tr>
        <td>false</td>
        <td>-</td>
        <td>"password"</td>
    </tr>
</table>
POST /user/login{?username,password}
< 200
< Content-Type: application/json
{ "possible_responses": [
    { "loggedIn" => true , "key" => AUTH_KEY },
    { "error" => "email"},
    { "error" => "password"}
] }

Logs the user out of the system, has <b>3</b> possible reponses. It deleted the <b>AUTH_KEY</b> from the database.
<table>
    <tr>
        <td><b>logout</b></td>
        <td><b>error</b></td>
    </tr>
    <tr>
        <td>true</td>
        <td>-</td>
    </tr>
    <tr>
        <td>false</td>
        <td>"Token does not exist"</td>
    </tr>
    <tr>
        <td>false</td>
        <td>"Expecting a token parameter"</td>
    </tr>
</table>
GET /user/logout{?token}
< 200
< Content-Type: application/json
{ "possible_responses": [
    { "error" => "Token does not exist"},
    { "error" => "Expecting a token parameter"},
    { "logout" => true }
] }

Check if a token is valid, has <b>3</b> possible reponses.

<table>
    <tr>
        <td><b>token</b></td>
        <td><b>error</b></td>
    </tr>
    <tr>
        <td>true</td>
        <td>-</td>
    </tr>
    <tr>
        <td>false</td>
        <td></td>
    </tr>
    <tr>
        <td>false</td>
        <td>"Expecting a token parameter"</td>
    </tr>
</table>

GET /user/checkToken{?token}
< 200
< Content-Type: application/json
{ "possible_responses": [
    { "token" => false },
    { "error" => "Expecting a token parameter"},
    { "token" => true }
] }

Searches the users for name/surname like the one supplied in the q paramater
GET /user/search{?q}
< 200
< Content-Type: application/json
[{"nume":"Stoica", "prenume":"Alex", "username":"alex"}]

Posts all the users posts.
GET /user/{id}/posts
< 200
< Content-Type: application/json
[{"content":"etc", "title":"etc"}]

--
Distance calculator 
This provides with 3 methods of calculating the distance between the user and the cinemas.
--

GET distance/googleMaps{?lat,lng}
< 200
< Content-Type: application/json
[ { "distance" : "7.9km" , "duration" : 1495 ,"name" : "Movieplex" } ]

GET distance/openMaps{?lat,lng}
< 200
< Content-Type: application/json
[ { "distance" : "7.9km" , "duration" : 1495 ,"name" : "Movieplex" } ]

GET distance/{?lat,lng}
< 200
< Content-Type: application/json
[ { "distance" : "7.9km" , "duration" : 1495 ,"name" : "Movieplex" } ]